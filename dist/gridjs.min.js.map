{"version":3,"sources":["gridjs.js"],"names":["global","factory","define","amd","exports","mod","gridjs","this","_classCallCheck","instance","Constructor","TypeError","getObjectValues","obj","Object","keys","map","key","isFunction","value","getType","toString","call","uuid","replace","c","r","Math","random","v","isRelativeTarget","target","ALL","PREV_IN_ROW","NEXT_IN_ROW","PREV_ROW","ROW","NEXT_ROW","PREV_IN_COL","NEXT_IN_COL","PREV_COL","COL","NEXT_COL","includes","isEntity","Entity","createGrid","addEntity","row","col","prevInRow","length","prevInCol","newEntity","options","nextInRow","netInCol","entities","id","push","entityAdded","properties","getEntity","val","entity","Array","isArray","getEntityByPosition","getEntityByUserObject","isEntityRelativeTarget","e1","e2","rowNumber","nextInCol","colNumber","getRelativeEntities","filter","create","i","rows","addRow","_i","columns","addColumn","userObject","find","forEach","setUserObject","oldUserObject","userObjectChanged","arguments","undefined","grid","publish","source","subject","message","Error","targetEntity","entityMessageReceived","iteratee","get","column","callback","set","move","fromRow","fromColumn","toRow","toColumn","fromEntity","toEntity","getRowCount","getColumnCount","defineProperty"],"mappings":"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","file":"gridjs.min.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.gridjs = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  // Relative targets\n  var ALL = 'ALL'; // All entities in grid\n  var PREV_IN_ROW = 'PREV_IN_ROW'; // Previous entity in row\n  var NEXT_IN_ROW = 'NEXT_IN_ROW'; // Next entity in row\n  var PREV_ROW = 'PREV_ROW'; // All entities in previous row\n  var ROW = 'ROW'; // All entities in row\n  var NEXT_ROW = 'NEXT_ROW'; // All entities in next row\n  var PREV_IN_COL = 'PREV_IN_COL'; // Previous entity in column\n  var NEXT_IN_COL = 'NEXT_IN_COL'; // Next entity in column\n  var PREV_COL = 'PREV_COL'; // All entities in previous column\n  var COL = 'COL'; // All entities in column\n  var NEXT_COL = 'NEXT_COL'; // All entities in next column\n\n  // After entity removed - actions\n  var DO_NOTHING = 'DO_NOTHING'; // Do nothing\n  var RENEW = 'RENEW'; // Replace with a new entity\n  var SHIFT_LEFT = 'SHIFT_LEFT'; // Shift the entities in the row left when one is deleted\n  var SHIFT_UP = 'SHIFT_UP'; // Shift the entities in the column up when one is deleted\n  var SHIFT_LEFT_ELSE_UP = 'SHIFT_LEFT_ELSE_UP'; // Shift the entities to the left if there are any, otherwise shift column up\n  var SHIFT_UP_ELSE_LEFT = 'SHIFT_UP_ELSE_LEFT'; // Shift the entities up if there are any, otherwise shift row left\n\n  // Default options for new grid.\n  // User may override any number of options in object passed as argument to the function.\n  var defaultOptions = {\n    userObjectChanged: null, // (newUserObject, oldUserObject, row, column, entityProperties, entityId)\n    entityAdded: null, // (row, column, entityProperties, entityId)\n    entityRemoved: null, // (row, column, entityProperties, entityId)\n    entityMessageReceived: null // (subject, message, userObject, entityProperties, entityId)\n  };\n\n  /**\n   * [getObjectValues description]\n   * @param  {[type]} obj [description]\n   * @return {[type]}     [description]\n   */\n  function getObjectValues(obj) {\n    return Object.keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n\n  /**\n   * Checks if value is classified as a Function object\n   * Thanks to A.Levy for this clone function (http://stackoverflow.com/a/728694)\n   * @param  {*}       value  The value to check\n   * @return {Boolean}        Returns true if value is a function, else false.\n   */\n  function isFunction(value) {\n    var getType = {};\n    return value && getType.toString.call(value) === '[object Function]';\n  }\n\n  /**\n   * Generate a uuid\n   * Thanks to broofa for this method of generating a uuid (ttp://stackoverflow.com/a/2117523)\n   * @return {string} uuid\n   */\n  function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Detect whether or not the target provided is a valid relative target identifier\n   * @param  {[type]}  target targetName\n   * @return {Boolean}\n   */\n  function isRelativeTarget(target) {\n    return [ALL, PREV_IN_ROW, NEXT_IN_ROW, PREV_ROW, ROW, NEXT_ROW, PREV_IN_COL, NEXT_IN_COL, PREV_COL, COL, NEXT_COL].includes(target);\n  }\n\n  /**\n   * [isAfterRemoveAction description]\n   * @param  {[type]}  action [description]\n   * @return {Boolean}        [description]\n   */\n  function isAfterRemoveAction(action) {\n    return [DO_NOTHING, RENEW, SHIFT_LEFT, SHIFT_UP, SHIFT_LEFT_ELSE_UP, SHIFT_UP_ELSE_LEFT].includes(action);\n  }\n\n  /**\n   * [isEntity description]\n   * @param  {[type]}  obj [description]\n   * @return {Boolean}     [description]\n   */\n  function isEntity(obj) {\n    return obj && obj instanceof Entity;\n  }\n\n  // When we remove an entity from the grid we will call a callback provided for the user's object.\n  // Based on the options passed in, we can modify the bahaviour.\n\n  /**\n   * Create a new grid\n   * @return {object}\n   */\n  function createGrid() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var entities = {};\n    var rows = [];\n    var columns = [];\n    var grid = {};\n\n    function addEntity(row, col) {\n      // Create a new entity and append to row and column.\n      var prevInRow = row.length > 0 ? row[row.length - 1] : null;\n      var prevInCol = col.length > 0 ? col[col.length - 1] : null;\n      var newEntity = new Entity(prevInRow, prevInCol, options);\n\n      if (prevInRow !== null) {\n        prevInRow.nextInRow = newEntity;\n      }\n\n      if (prevInCol !== null) {\n        prevInCol.netInCol = newEntity;\n      }\n\n      entities[newEntity.id] = newEntity;\n      row.push(newEntity);\n      col.push(newEntity);\n\n      if (isFunction(options.entityAdded)) {\n        options.entityAdded(row, col, newEntity.properties, newEntity.id);\n      }\n\n      return newEntity;\n    }\n\n    function getEntity(val) {\n      // We need to resolve the value of source to an Entity\n      var entity = null;\n\n      // Is this a string? It could be an id\n      if (isEntity(val)) {\n        entity = val;\n      } else if (typeof val === 'string' && Object.keys(entities).includes(val)) {\n        entity = entities[val];\n      } else if (Array.isArray(val) && val.length === 2) {\n        entity = getEntityByPosition(val[0], val[1]);\n      } else {\n        entity = getEntityByUserObject(val);\n      }\n    }\n\n    function isEntityRelativeTarget(e1, e2, target) {\n      if (e1 !== e2) {\n        switch (target) {\n          case ALL:\n            return true;\n          case PREV_IN_ROW:\n            return e2 === e1.prevInRow;\n          case NEXT_IN_ROW:\n            return e2 === e1.prevInRow;\n          case PREV_ROW:\n            return e2.rowNumber === e1.rowNumber - 1;\n          case ROW:\n            return e2.rowNumber === e1.rowNumber;\n          case NEXT_ROW:\n            return e2.rowNumber === e1.rowNumber + 1;\n          case PREV_IN_COL:\n            return e2 === e1.prevInCol;\n          case NEXT_IN_COL:\n            return e2 === e1.nextInCol;\n          case NEXT_COL:\n            return e2.colNumber === e1.colNumber - 1;\n          case COL:\n            return e2.colNumber === e1.colNumber;\n          case PREV_COL:\n            return e2.colNumber === e1.colNumber + 1;\n        }\n      }\n\n      return false;\n    }\n\n    function getRelativeEntities(entity, target) {\n      return getObjectValues(entities).filter(function (val) {\n        return isEntityRelativeTarget(entity, val, target);\n      });\n    }\n\n    function getEntityByPosition(row, col, create) {\n      // Do we have this many rows and columns?\n      // If not, and create flag is true, we will create them first\n      if (create) {\n        // Create new rows\n        for (var i = rows.length; i < row; i++) {\n          addRow();\n        }\n\n        // Create new columns\n        for (var _i = columns.length; _i < col; _i++) {\n          addColumn();\n        }\n      }\n\n      if (rows.length >= row && rows[row - 1].length >= col) {\n        return rows[row - 1][col - 1];\n      }\n\n      // No entity there, and we didn't create it\n      return null;\n    }\n\n    function getEntityByUserObject(userObject) {\n      return getObjectValues(entities).find(function (entity) {\n        return entity.userObject === userObject;\n      }) || null;\n    }\n\n    function addRow() {\n      // Add an entity for each column\n      var row = [];\n      columns.forEach(function (col) {\n        return addEntity(row, col);\n      });\n      rows.push(row);\n    }\n\n    function addColumn() {\n      // Add an entity for each row\n      var col = [];\n      rows.forEach(function (row) {\n        return addEntity(row, col);\n      });\n      columns.push(col);\n    }\n\n    function setUserObject(entity, userObject) {\n      var oldUserObject = entity.userObject;\n      entity.userObject = userObject;\n\n      if (isFunction(options.userObjectChanged)) {\n        options.userObjectChanged(userObject, oldUserObject, entity.rowNumber, entity.colNumber, entity.properties, entity.id);\n      }\n    }\n\n    /**\n     * Publish a message out to other entities in the grid.\n     * @param  {string} source   The entity ID of the message source\n     * @param  {string} target   The relative target(s), or entity ID or target for message\n     * @param  {strinf} subject  The subject\n     * @param  {object} message  The message to send\n     * @return {undefined}\n     */\n    grid.publish = function (source, target, subject, message) {\n      // Source should be Entity, entityId, userObject or Array[row, column];\n      source = getEntity(source);\n\n      if (source === null) {\n        throw new Error('Cannot publish message without a valid source');\n      }\n\n      var targetEntity = getEntity(target);\n\n      if (targetEntity !== null) {\n        if (isFunction(options.entityMessageReceived)) {\n          options.entityMessageReceived(subject, message, targetEntity.userObject, targetEntity.properties, targetEntity.id);\n        }\n      } else if (isRelativeTarget(target)) {\n        // Get entities, and for each call grid.publish\n        getRelativeEntities(source, target).forEach(function (entity) {\n          return grid.publish(source, entity, subject, message);\n        });\n      }\n    };\n\n    /**\n     * Find entities that when passed to interatee function, return true.\n     * @param  {function} iteratee Iteratee function (userObject, entityProps, entityId)\n     * @return {Entity[]}\n     */\n    grid.find = function (iteratee) {\n      if (isFunction(iteratee)) {\n        return getObjectValues(entities).filter(function (entity) {\n          return iteratee(entity.userObject, entity.properties, entity.id);\n        });\n      } else {\n        return [];\n      }\n    };\n\n    /**\n     * Get user object at grid position\n     * @param  {[type]} row    [description]\n     * @param  {[type]} column [description]\n     * @return {[type]}        [description]\n     */\n    grid.get = function (row, column, callback) {\n      if (isFunction(callback)) {\n        var entity = getEntityByPosition(row, column, false);\n        callback(entity.userObject, entity.properties);\n      }\n    };\n\n    /**\n     * Set user object at grid position\n     * @param {[type]} row        [description]\n     * @param {[type]} column     [description]\n     * @param {[type]} userObject [description]\n     */\n    grid.set = function (row, column, userObject) {\n      var entity = getEntityByPosition(row, column, true);\n      if (userObject) {\n        setUserObject(entity, userObject);\n      }\n    };\n\n    /**\n     * Move the user object from one entity on grid to another\n     * @param  {[type]} fromRow    [description]\n     * @param  {[type]} fromColumn [description]\n     * @param  {[type]} toRow      [description]\n     * @param  {[type]} toColumn   [description]\n     * @return {[type]}            [description]\n     */\n    grid.move = function (fromRow, fromColumn, toRow, toColumn) {\n      var fromEntity = getEntityByPosition(fromRow, fromColumn);\n      var toEntity = getEntityByPosition(toRow, toColumn, true);\n\n      if (fromEntity && toEntity) {\n        var userObject = fromEntity.userObject;\n        setUserObject(fromEntity, null);\n        setUserObject(toEntity, userObject);\n      }\n    };\n\n    /**\n     * Get number of rows in grid\n     * @return {number} Number of rows\n     */\n    grid.getRowCount = function () {\n      return rows.length;\n    };\n\n    /**\n     * Get number of columns in grid\n     * @return {number} Number of columns\n     */\n    grid.getColumnCount = function () {\n      return columns.length;\n    };\n\n    return grid;\n  }\n\n  /**\n   * Entity class. Represents an item in the grid data store.\n   */\n\n  var Entity = function Entity(prevInRow, prevInCol, options) {\n    _classCallCheck(this, Entity);\n\n    this.id = uuid();\n    this.rowNumber = prevInRow ? prevInRow.rowNumber + 1 : 1;\n    this.colNumber = prevInCol ? prevInCol.colNumber + 1 : 1;\n    this.prevInRow = prevInRow;\n    this.prevInCol = prevInCol;\n    this.properties = {};\n    this.userObject = null;\n    this.options = options;\n  };\n\n  var DuplicateFirstEntityException = function DuplicateFirstEntityException() {\n    _classCallCheck(this, DuplicateFirstEntityException);\n\n    this.name = 'DuplicateFirstEntityException';\n    this.message = 'Cannot add multiple entities as first entity in grid';\n  };\n\n  exports.createGrid = createGrid;\n});"],"sourceRoot":"/source/"}