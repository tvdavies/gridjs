{"version":3,"sources":["gridjs.js"],"names":["global","factory","define","amd","exports","mod","gridjs","this","_classCallCheck","instance","Constructor","TypeError","isFunction","functionToCheck","getType","toString","call","uuid","replace","c","r","Math","random","v","isRelativeTarget","target","ALL","PREV_IN_ROW","NEXT_IN_ROW","PREV_ROW","ROW","NEXT_ROW","PREV_IN_COL","NEXT_IN_COL","PREV_COL","COL","NEXT_COL","includes","createGrid","options","entitiesObj","entities","grid","firstEntity","publish","source","subject","message","keys","find","iteratee","filter","entity","userObject","properties","id","addEntity","after","arguments","length","undefined","DuplicateFirstEntityException","Entity","push","removeEntity","Object","defineProperty","value","_createClass","defineProperties","props","i","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","prevInRow","prevInCol","newUserObject","oldUserObject","userObjectChanged","name"],"mappings":"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","file":"gridjs.min.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.gridjs = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  // Relative targets\n  var ALL = 'ALL'; // All entities in grid\n  var PREV_IN_ROW = 'PREV_IN_ROW'; // Previous entity in row\n  var NEXT_IN_ROW = 'NEXT_IN_ROW'; // Next entity in row\n  var PREV_ROW = 'PREV_ROW'; // All entities in previous row\n  var ROW = 'ROW'; // All entities in row\n  var NEXT_ROW = 'NEXT_ROW'; // All entities in next row\n  var PREV_IN_COL = 'PREV_IN_COL'; // Previous entity in column\n  var NEXT_IN_COL = 'NEXT_IN_COL'; // Next entity in column\n  var PREV_COL = 'PREV_COL'; // All entities in previous column\n  var COL = 'COL'; // All entities in column\n  var NEXT_COL = 'NEXT_COL'; // All entities in next column\n\n  // After entity removed - actions\n  var DO_NOTHING = 'DO_NOTHING'; // Do nothing\n  var RENEW = 'RENEW'; // Replace with a new entity\n  var SHIFT_LEFT = 'SHIFT_LEFT'; // Shift the entities in the row left when one is deleted\n  var SHIFT_UP = 'SHIFT_UP'; // Shift the entities in the column up when one is deleted\n  var SHIFT_LEFT_ELSE_UP = 'SHIFT_LEFT_ELSE_UP'; // Shift the entities to the left if there are any, otherwise shift column up\n  var SHIFT_UP_ELSE_LEFT = 'SHIFT_UP_ELSE_LEFT'; // Shift the entities up if there are any, otherwise shift row left\n\n  // Default options for new grid.\n  // User may override any number of options in object passed as argument to the function.\n  var defaultOptions = {\n    autoExpand: false,\n    autoCollapse: false,\n    afterEntityRemoved: DO_NOTHING,\n\n    // Callbacks\n    userObjectChanged: null, // (entity, newUserObject, oldUserObject)\n    entityAdded: null, // (entity)\n    entityRemoved: null // (entity)\n  };\n\n  function isFunction(functionToCheck) {\n    var getType = {};\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n  }\n\n  /**\n   * Generate a uuid\n   * Thanks to broofa for this method of generating a uuid\n   * http://stackoverflow.com/a/2117523\n   * @return {string} uuid\n   */\n  function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Detect whether or not the target provided is a valid relative target identifier\n   * @param  {[type]}  target targetName\n   * @return {Boolean}\n   */\n  function isRelativeTarget(target) {\n    return [ALL, PREV_IN_ROW, NEXT_IN_ROW, PREV_ROW, ROW, NEXT_ROW, PREV_IN_COL, NEXT_IN_COL, PREV_COL, COL, NEXT_COL].includes(target);\n  }\n\n  function isEntity(obj) {\n    return obj && obj instanceof Entity;\n  }\n\n  // When we remove an entity from the grid we will call a callback provided for the user's object.\n  // Based on the options passed in, we can modify the bahaviour.\n\n  /**\n   * Create a new grid\n   * @return {object}\n   */\n  function createGrid(options) {\n    var entitiesObj = {};\n    var entities = [];\n    var rows = [];\n    var columns = [];\n    var grid = {};\n\n    var firstEntity = null;\n\n    /**\n     * Publish a message out to other entities in the grid.\n     * @param  {string} source   The entity ID of the message sourcerhino\n     * @param  {string} target   The relative target(s), or entity ID or target for message\n     * @param  {strinf} subject  The subject\n     * @param  {object} message  The message to send\n     * @return {undefined}\n     */\n    grid.publish = function (source, target, subject, message) {\n      // Check target is valid\n      if (isRelativeTarget(target)) {} else if (entitiesObj.keys().includes(target)) {\n        // Send message to entity\n      }\n    };\n\n    /**\n     * [find description]\n     * @param  {[type]} iteratee [description]\n     * @return {[type]}          [description]\n     */\n    grid.find = function (iteratee) {\n      if (isFunction(iteratee)) {\n        return entities.filter(function (entity) {\n          return iteratee(entity.userObject, entity.properties, entity.id);\n        });\n      } else {\n        return [];\n      }\n    };\n\n    grid.addEntity = function (after) {\n      var space = arguments.length <= 1 || arguments[1] === undefined ? ROW : arguments[1];\n\n      // After must be an entity/entityId/userObject on the grid, unless this is the first entity, in which case\n      // it will be added to the first row, and the first column.\n\n      if (typeof after === 'undefined' || after === null) {\n        if (firstEntity !== null) {\n          // I'm afraid this isn't going to work out. It's not you, it's me.\n          throw new DuplicateFirstEntityException();\n        } else {\n          // Add a new entity as the first in the grid\n          var entity = new Entity(options);\n          entities.push(entity);\n          entitiesObj[entity.id] = entity;\n        }\n      }\n\n      // TODO\n      // Another thought. How will we link entities to the grid, if there are no entities\n      // either before or after in the row?\n      // We probably need to have an Empty class that fills empty places on the grid, so that\n      // we can navigate the grid.\n      // Or perhaps this is a non-issue\n      // In a grid, the number of rows/columns is consistent, and so when a column is added,\n      // we add entities for each of the rows. Likewise, when a new row is added, we add an\n      // entity to each of the columns. That is the easy part.\n      // The more difficult part is when we start deleting entities, rows columns and need to\n      // do some shifting around.\n\n      // TODO\n      // Whatever the user has provided, we need to try and resolve it to an entity in the grid\n      // otherwise we cannot add a new entity.\n\n      /*\n      if (isEntity(after)) {\n       } else if (isEntityId(after)) {\n       }\n      */\n    };\n\n    grid.removeEntity = function (entity) {\n      // TODO\n      // Remove an entity and do the jiggery-pokery to shift things around according to the options\n    };\n\n    return grid;\n  }\n\n  /**\n   * Entity class. Represents an item in the grid data store.\n   */\n\n  var Entity = function () {\n    function Entity(prevInRow, prevInCol, options) {\n      _classCallCheck(this, Entity);\n\n      this.id = uuid();\n      // Properties object can be passed to the user object when it is attached to the entity.\n      // This allows properties associated with the entity can remain in place when the user object\n      // is moved within the grid.\n      this.properties = {};\n      this.userObject = null;\n      this.options = options;\n    }\n\n    _createClass(Entity, [{\n      key: 'setUserObject',\n      value: function setUserObject(newUserObject) {\n        var oldUserObject = this.userObject;\n        this.userObject = newUserObject;\n\n        if (isFunction(this.options.userObjectChanged)) {\n          this.options.userObjectChanged(this.properties, newUserObject, oldUserObject);\n        }\n      }\n    }]);\n\n    return Entity;\n  }();\n\n  var DuplicateFirstEntityException = function DuplicateFirstEntityException() {\n    _classCallCheck(this, DuplicateFirstEntityException);\n\n    this.name = 'DuplicateFirstEntityException';\n    this.message = 'Cannot add multiple entities as first entity in grid';\n  };\n\n  exports.default = createGrid;\n});"],"sourceRoot":"/source/"}