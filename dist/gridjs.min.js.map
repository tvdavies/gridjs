{"version":3,"sources":["gridjs.js"],"names":["global","factory","define","amd","exports","mod","gridjs","this","_classCallCheck","instance","Constructor","TypeError","isFunction","value","getType","toString","call","uuid","replace","c","r","Math","random","v","isRelativeTarget","target","ALL","PREV_IN_ROW","NEXT_IN_ROW","PREV_ROW","ROW","NEXT_ROW","PREV_IN_COL","NEXT_IN_COL","PREV_COL","COL","NEXT_COL","includes","isEntity","obj","Entity","createGrid","options","getEntity","val","entity","entities","keys","Array","isArray","length","getEntityByPosition","getEntityByUserObject","getRelativeEntities","relativeEntities","row","col","create","i","rows","grid","addRow","_i","columns","addColumn","userObject","find","FIRST_ENTITY","publish","source","subject","message","Error","targetEntity","entityMessageReceived","properties","id","forEach","iteratee","Object","values","filter","get","column","callback","set","getRowCount","getColumnCount","defineProperty","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","prevInRow","prevInCol","newUserObject","oldUserObject","userObjectChanged"],"mappings":"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","file":"gridjs.min.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.gridjs = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  // Relative targets\n  var ALL = 'ALL'; // All entities in grid\n  var PREV_IN_ROW = 'PREV_IN_ROW'; // Previous entity in row\n  var NEXT_IN_ROW = 'NEXT_IN_ROW'; // Next entity in row\n  var PREV_ROW = 'PREV_ROW'; // All entities in previous row\n  var ROW = 'ROW'; // All entities in row\n  var NEXT_ROW = 'NEXT_ROW'; // All entities in next row\n  var PREV_IN_COL = 'PREV_IN_COL'; // Previous entity in column\n  var NEXT_IN_COL = 'NEXT_IN_COL'; // Next entity in column\n  var PREV_COL = 'PREV_COL'; // All entities in previous column\n  var COL = 'COL'; // All entities in column\n  var NEXT_COL = 'NEXT_COL'; // All entities in next column\n\n  // After entity removed - actions\n  var DO_NOTHING = 'DO_NOTHING'; // Do nothing\n  var RENEW = 'RENEW'; // Replace with a new entity\n  var SHIFT_LEFT = 'SHIFT_LEFT'; // Shift the entities in the row left when one is deleted\n  var SHIFT_UP = 'SHIFT_UP'; // Shift the entities in the column up when one is deleted\n  var SHIFT_LEFT_ELSE_UP = 'SHIFT_LEFT_ELSE_UP'; // Shift the entities to the left if there are any, otherwise shift column up\n  var SHIFT_UP_ELSE_LEFT = 'SHIFT_UP_ELSE_LEFT'; // Shift the entities up if there are any, otherwise shift row left\n\n  // Default options for new grid.\n  // User may override any number of options in object passed as argument to the function.\n  var defaultOptions = {\n    userObjectChanged: null, // (entity, newUserObject, oldUserObject)\n    entityAdded: null, // (entity)\n    entityRemoved: null, // (entity)\n    entityMessageReceived: null // (subject, message, userObject, entityProperties, entityId)\n  };\n\n  /**\n   * Checks if value is classified as a Function object\n   * Thanks to A.Levy for this clone function (http://stackoverflow.com/a/728694)\n   * @param  {*}       value  The value to check\n   * @return {Boolean}        Returns true if value is a function, else false.\n   */\n  function isFunction(value) {\n    var getType = {};\n    return value && getType.toString.call(value) === '[object Function]';\n  }\n\n  /**\n   * Generate a uuid\n   * Thanks to broofa for this method of generating a uuid (ttp://stackoverflow.com/a/2117523)\n   * @return {string} uuid\n   */\n  function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Detect whether or not the target provided is a valid relative target identifier\n   * @param  {[type]}  target targetName\n   * @return {Boolean}\n   */\n  function isRelativeTarget(target) {\n    return [ALL, PREV_IN_ROW, NEXT_IN_ROW, PREV_ROW, ROW, NEXT_ROW, PREV_IN_COL, NEXT_IN_COL, PREV_COL, COL, NEXT_COL].includes(target);\n  }\n\n  function isAfterRemoveAction(action) {\n    return [DO_NOTHING, RENEW, SHIFT_LEFT, SHIFT_UP, SHIFT_LEFT_ELSE_UP, SHIFT_UP_ELSE_LEFT].includes(action);\n  }\n\n  function isEntity(obj) {\n    return obj && obj instanceof Entity;\n  }\n\n  // When we remove an entity from the grid we will call a callback provided for the user's object.\n  // Based on the options passed in, we can modify the bahaviour.\n\n  /**\n   * Create a new grid\n   * @return {object}\n   */\n  function createGrid(options) {\n    var FIRST_ENTITY = new Entity(null, null, options);\n    var entities = {};\n    var rows = [[FIRST_ENTITY]];\n    var columns = [[FIRST_ENTITY]];\n    var grid = {};\n\n    function addEntity(row, col) {\n      // Create a new entity and append to row and column.\n      var prevInRow = row[row.length - 1];\n      var prevInCol = col[col.length - 1];\n      var newEntity = new Entity(prevInRow, prevInCol, options);\n\n      prevInRow.nextInRow = newEntity;\n      prevInCol.netInCol = newEntity;\n\n      entities[newEntity.id] = newEntity;\n      row.push(newEntity);\n      col.push(newEntity);\n    }\n\n    function getEntity(val) {\n      // We need to resolve the value of source to an Entity\n      var entity = null;\n\n      // Is this a string? It could be an id\n      if (isEntity(val)) {\n        entity = val;\n      } else if (typeof val === 'string' && entities.keys().includes(val)) {\n        entity = entities[val];\n      } else if (Array.isArray(val) && val.length === 2) {\n        entity = getEntityByPosition(val[0], val[1]);\n      } else {\n        entity = getEntityByUserObject(val);\n      }\n    }\n\n    function getRelativeEntities(entity, target) {\n      var relativeEntities = [];\n\n      return relativeEntities;\n    }\n\n    function getEntityByPosition(row, col, create) {\n      // Do we have this many rows and columns?\n      // If not, and create flag is true, we will create them first\n      if (create) {\n        // Create new rows\n        for (var i = rows.length; i < row; i++) {\n          grid.addRow();\n        }\n\n        // Create new columns\n        for (var _i = columns.length; _i < col; _i++) {\n          grid.addColumn();\n        }\n      }\n\n      if (rows.length >= row && rows[row - 1].length >= col) {\n        return rows[row - 1][col - 1];\n      }\n\n      // No entity there, and we didn't create it\n      return null;\n    }\n\n    function getEntityByUserObject(userObject) {\n      return entities.find(function (entity) {\n        return entity.userObject === userObject;\n      });\n    }\n\n    function addRow() {\n      var _this = this;\n\n      // Add an entity for each column\n      var row = [];\n      columns.forEach(function (col) {\n        return _this.addEntity(row, col);\n      });\n    }\n\n    function addColumn() {\n      var _this2 = this;\n\n      // Add an entity for each row\n      var col = [];\n      rows.forEach(function (row) {\n        return _this2.addEntity(row, col);\n      });\n    }\n\n    /**\n     * Publish a message out to other entities in the grid.\n     * @param  {string} source   The entity ID of the message source\n     * @param  {string} target   The relative target(s), or entity ID or target for message\n     * @param  {strinf} subject  The subject\n     * @param  {object} message  The message to send\n     * @return {undefined}\n     */\n    grid.publish = function (source, target, subject, message) {\n      // Source should be Entity, entityId, userObject or Array[row, column];\n      source = getEntity(source);\n\n      if (source === null) {\n        throw new Error('Cannot publish message without a valid source');\n      }\n\n      var targetEntity = getEntity(target);\n\n      if (targetEntity !== null) {\n        if (isFunction(options.entityMessageReceived)) {\n          options.entityMessageReceived(subject, message, targetEntity.userObject, targetEntity.properties, targetEntity.id);\n        }\n      } else if (isRelativeTarget(target)) {\n        // Get entities, and for each call grid.publish\n        getRelativeEntities(source, target).forEach(function (entity) {\n          return grid.publish(source, entity, subject, message);\n        });\n      }\n    };\n\n    /**\n     * Find entities that when passed to interatee function, return true.\n     * @param  {function} iteratee Iteratee function (userObject, entityProps, entityId)\n     * @return {Entity[]}\n     */\n    grid.find = function (iteratee) {\n      if (isFunction(iteratee)) {\n        return Object.values(entities).filter(function (entity) {\n          return iteratee(entity.userObject, entity.properties, entity.id);\n        });\n      } else {\n        return [];\n      }\n    };\n\n    /**\n     * Get user object at grid position\n     * @param  {[type]} row    [description]\n     * @param  {[type]} column [description]\n     * @return {[type]}        [description]\n     */\n    grid.get = function (row, column, callback) {\n      if (isFunction(callback)) {\n        var entity = getEntity(row, column, true);\n        callback(entity.userObject, entity.properties);\n      }\n    };\n\n    /**\n     * Set user object at grid position\n     * @param {[type]} row        [description]\n     * @param {[type]} column     [description]\n     * @param {[type]} userObject [description]\n     */\n    grid.set = function (row, column, userObject) {\n      getEntity(row, column).userObject = userObject;\n    };\n\n    /**\n     * Get number of rows in grid\n     * @return {number} Number of rows\n     */\n    grid.getRowCount = function () {\n      return rows.length;\n    };\n\n    /**\n     * Get number of columns in grid\n     * @return {number} Number of columns\n     */\n    grid.getColumnCount = function () {\n      return columns.length;\n    };\n\n    return grid;\n  }\n\n  /**\n   * Entity class. Represents an item in the grid data store.\n   */\n\n  var Entity = function () {\n    function Entity(prevInRow, prevInCol, options) {\n      _classCallCheck(this, Entity);\n\n      this.id = uuid();\n\n      this.prevInRow = prevInRow;\n      this.prevInCol = prevInCol;\n\n      // Properties object can be passed to the user object when it is attached to the entity.\n      // This allows properties associated with the entity can remain in place when the user object\n      // is moved within the grid.\n      this.properties = {};\n      this.userObject = null;\n      this.options = options;\n    }\n\n    _createClass(Entity, [{\n      key: 'setUserObject',\n      value: function setUserObject(newUserObject) {\n        var oldUserObject = this.userObject;\n        this.userObject = newUserObject;\n\n        if (isFunction(this.options.userObjectChanged)) {\n          this.options.userObjectChanged(this.properties, newUserObject, oldUserObject);\n        }\n      }\n    }]);\n\n    return Entity;\n  }();\n\n  var DuplicateFirstEntityException = function DuplicateFirstEntityException() {\n    _classCallCheck(this, DuplicateFirstEntityException);\n\n    this.name = 'DuplicateFirstEntityException';\n    this.message = 'Cannot add multiple entities as first entity in grid';\n  };\n\n  exports.createGrid = createGrid;\n});"],"sourceRoot":"/source/"}