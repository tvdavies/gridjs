{"version":3,"sources":["gridjs.js"],"names":["global","factory","define","amd","exports","mod","gridjs","this","_classCallCheck","instance","Constructor","TypeError","getObjectValues","obj","Object","keys","map","key","isFunction","value","getType","toString","call","uuid","replace","c","r","Math","random","v","isRelativeTarget","target","ALL","PREV_IN_ROW","NEXT_IN_ROW","PREV_ROW","ROW","NEXT_ROW","PREV_IN_COL","NEXT_IN_COL","PREV_COL","COL","NEXT_COL","includes","isEntity","Entity","createGrid","addEntity","row","col","prevInRow","length","prevInCol","newEntity","options","nextInRow","netInCol","entities","id","push","getEntity","val","callback","Array","isArray","getEntityByPosition","entity","getEntityByUserObject","isEntityRelativeTarget","e1","e2","rowNumber","nextInCol","colNumber","getRelativeEntities","filter","create","created","rows","columns","i","addRow","_i","addColumn","console","log","userObject","find","forEach","setUserObject","oldUserObject","userObjectChanged","properties","arguments","undefined","grid","publish","source","subject","message","sourceEntity","Error","targetEntity","entityMessageReceived","iteratee","get","column","set","entityAdded","move","fromRow","fromColumn","toRow","toColumn","fromEntity","toEntity","getRowCount","getColumnCount","defineProperty"],"mappings":"CAAA,SAAWA,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,WAAYD,OACf,IAAuB,mBAAZG,SAChBH,EAAQG,aACH,CACL,GAAIC,IACFD,WAEFH,GAAQI,EAAID,SACZJ,EAAOM,OAASD,EAAID,UAErBG,KAAM,SAAUH,GACjB,YAMA,SAASI,GAAgBC,EAAUC,GACjC,KAAMD,YAAoBC,IACxB,KAAM,IAAIC,WAAU,qCAuCxB,QAASC,GAAgBC,GACvB,MAAOC,QAAOC,KAAKF,GAAKG,IAAI,SAAUC,GACpC,MAAOJ,GAAII,KAUf,QAASC,GAAWC,GAClB,GAAIC,KACJ,OAAOD,IAA0C,sBAAjCC,EAAQC,SAASC,KAAKH,GAQxC,QAASI,KACP,MAAO,uCAAuCC,QAAQ,QAAS,SAAUC,GACvE,GAAIC,GAAoB,GAAhBC,KAAKC,SAAgB,EACzBC,EAAS,KAALJ,EAAWC,EAAQ,EAAJA,EAAU,CACjC,OAAOG,GAAER,SAAS,MAStB,QAASS,GAAiBC,GACxB,OAAQC,EAAKC,EAAaC,EAAaC,EAAUC,EAAKC,EAAUC,EAAaC,EAAaC,EAAUC,EAAKC,GAAUC,SAASZ,GAiB9H,QAASa,GAAS/B,GAChB,MAAOA,IAAOA,YAAegC,GAU/B,QAASC,KAQP,QAASC,GAAUC,EAAKC,GAEtB,GAAIC,GAAYF,EAAIG,OAAS,EAAIH,EAAIA,EAAIG,OAAS,GAAK,KACnDC,EAAYH,EAAIE,OAAS,EAAIF,EAAIA,EAAIE,OAAS,GAAK,KACnDE,EAAY,GAAIR,GAAOK,EAAWE,EAAWE,EAcjD,OAZkB,QAAdJ,IACFA,EAAUK,UAAYF,GAGN,OAAdD,IACFA,EAAUI,SAAWH,GAGvBI,EAASJ,EAAUK,IAAML,EACzBL,EAAIW,KAAKN,GACTJ,EAAIU,KAAKN,GAEFA,EAGT,QAASO,GAAUC,EAAKC,GAGlBlB,EAASiB,GACXC,EAASD,GACe,gBAARA,IAAoB/C,OAAOC,KAAK0C,GAAUd,SAASkB,GACnEC,EAASL,EAASI,IACTE,MAAMC,QAAQH,IAAuB,IAAfA,EAAIV,OACnCc,EAAoBJ,EAAI,GAAIA,EAAI,IAAI,EAAO,SAAUK,GACnD,MAAOJ,GAASI,KAGlBJ,EAASK,EAAsBN,IAInC,QAASO,GAAuBC,EAAIC,EAAIvC,GACtC,GAAIsC,IAAOC,EACT,OAAQvC,GACN,IAAKC,GACH,OAAO,CACT,KAAKC,GACH,MAAOqC,KAAOD,EAAGnB,SACnB,KAAKhB,GACH,MAAOoC,KAAOD,EAAGnB,SACnB,KAAKf,GACH,MAAOmC,GAAGC,YAAcF,EAAGE,UAAY,CACzC,KAAKnC,GACH,MAAOkC,GAAGC,YAAcF,EAAGE,SAC7B,KAAKlC,GACH,MAAOiC,GAAGC,YAAcF,EAAGE,UAAY,CACzC,KAAKjC,GACH,MAAOgC,KAAOD,EAAGjB,SACnB,KAAKb,GACH,MAAO+B,KAAOD,EAAGG,SACnB,KAAK9B,GACH,MAAO4B,GAAGG,YAAcJ,EAAGI,UAAY,CACzC,KAAKhC,GACH,MAAO6B,GAAGG,YAAcJ,EAAGI,SAC7B,KAAKjC,GACH,MAAO8B,GAAGG,YAAcJ,EAAGI,UAAY,EAI7C,OAAO,EAGT,QAASC,GAAoBR,EAAQnC,GACnC,MAAOnB,GAAgB6C,GAAUkB,OAAO,SAAUd,GAChD,MAAOO,GAAuBF,EAAQL,EAAK9B,KAI/C,QAASkC,GAAoBjB,EAAKC,EAAK2B,EAAQd,GAC7C,GAAIe,IAAU,CAId,IAAID,EAAQ,CACE,IAAR5B,GAA6B,IAAhB8B,EAAK3B,QAAwB,IAARF,GAAgC,IAAnB8B,EAAQ5B,SAEzD2B,EAAKnB,SACLoB,EAAQpB,SACRZ,EAAU+B,EAAK,GAAIC,EAAQ,IAC3BF,GAAU,EAIZ,KAAK,GAAIG,GAAIF,EAAK3B,OAAQ6B,EAAIhC,EAAKgC,IACjCC,IACAJ,GAAU,CAIZ,KAAK,GAAIK,GAAKH,EAAQ5B,OAAQ+B,EAAKjC,EAAKiC,IACtCC,IACAN,GAAU,EAIdO,QAAQC,IAAI,aAAerC,EAAM,GAAK,mBAAqB8B,EAAK3B,QAChEiC,QAAQC,IAAI,aAAepC,EAAM,GAAK,4BAA8B6B,EAAK9B,EAAM,GAAGG,QAE9E2B,EAAK3B,QAAUH,GAAO8B,EAAK9B,EAAM,GAAGG,QAAUF,EAC5C/B,EAAW4C,IACbA,EAASgB,EAAK9B,EAAM,GAAGC,EAAM,GAAI4B,GAE1B3D,EAAW4C,IACpBA,EAAS,KAAMe,GAInB,QAASV,GAAsBmB,GAC7B,MAAO1E,GAAgB6C,GAAU8B,KAAK,SAAUrB,GAC9C,MAAOA,GAAOoB,aAAeA,KACzB,KAGR,QAASL,KAEP,GAAIjC,KACJ+B,GAAQS,QAAQ,SAAUvC,GACxB,MAAOF,GAAUC,EAAKC,KAExB6B,EAAKnB,KAAKX,GAGZ,QAASmC,KAEP,GAAIlC,KACJ6B,GAAKU,QAAQ,SAAUxC,GACrB,MAAOD,GAAUC,EAAKC,KAExB8B,EAAQpB,KAAKV,GAGf,QAASwC,GAAcvB,EAAQoB,GAC7B,GAAII,GAAgBxB,EAAOoB,UAC3BpB,GAAOoB,WAAaA,EAEhBpE,EAAWoC,EAAQqC,oBACrBrC,EAAQqC,kBAAkBL,EAAYI,EAAexB,EAAOK,UAAWL,EAAOO,UAAWP,EAAO0B,WAAY1B,EAAOR,IArJvH,GAAIJ,GAAUuC,UAAU1C,QAAU,GAAsB2C,SAAjBD,UAAU,MAAwBA,UAAU,GAE/EpC,KACAqB,KACAC,KACAgB,IAyQJ,OA7GAA,GAAKC,QAAU,SAAUC,EAAQlE,EAAQmE,EAASC,GAEhDvC,EAAUqC,EAAQ,SAAUG,GAC1B,GAAqB,OAAjBA,EACF,KAAM,IAAIC,OAAM,gDAGlBzC,GAAU7B,EAAQ,SAAUuE,GACL,OAAjBA,EACEpF,EAAWoC,EAAQiD,wBACrBjD,EAAQiD,sBAAsBL,EAASC,EAASG,EAAahB,WAAYgB,EAAaV,WAAYU,EAAa5C,IAExG5B,EAAiBC,IAE1B2C,EAAoBuB,EAAQlE,GAAQyD,QAAQ,SAAUtB,GACpD,MAAO6B,GAAKC,QAAQC,EAAQ/B,EAAQgC,EAASC,UAYvDJ,EAAKR,KAAO,SAAUiB,GACpB,MAAItF,GAAWsF,GACN5F,EAAgB6C,GAAUkB,OAAO,SAAUT,GAChD,MAAOsC,GAAStC,EAAOoB,WAAYpB,EAAO0B,WAAY1B,EAAOR,UAanEqC,EAAKU,IAAM,SAAUzD,EAAK0D,EAAQ5C,GAC5B5C,EAAW4C,IACbG,EAAoBjB,EAAK0D,GAAQ,EAAO,SAAUxC,GAChD,MAAOJ,GAASI,EAAOoB,WAAYpB,EAAO0B,eAWhDG,EAAKY,IAAM,SAAU3D,EAAK0D,EAAQpB,GAChCF,QAAQC,IAAI,kBACZD,QAAQC,IAAIrC,EAAM,KAAO0D,GACzBzC,EAAoBjB,EAAK0D,GAAQ,EAAM,SAAUxC,EAAQW,GACnDS,GACFG,EAAcvB,EAAQoB,GAGpBT,GAAW3D,EAAWoC,EAAQsD,cAChCtD,EAAQsD,YAAY1C,EAAOK,UAAWL,EAAOO,UAAWP,EAAO0B,WAAY1B,EAAOR,OAaxFqC,EAAKc,KAAO,SAAUC,EAASC,EAAYC,EAAOC,GAChDhD,EAAoB6C,EAASC,GAAY,EAAO,SAAUG,GACxD,GAAmB,OAAfA,EACF,KAAM,IAAIb,OAAM,gCAGlBpC,GAAoB+C,EAAOC,GAAU,EAAM,SAAUE,GACnD,GAAI7B,GAAa4B,EAAW5B,UAC5BG,GAAcyB,EAAY,MAC1BzB,EAAc0B,EAAU7B,QAS9BS,EAAKqB,YAAc,WACjB,MAAOtC,GAAK3B,QAOd4C,EAAKsB,eAAiB,WACpB,MAAOtC,GAAQ5B,QAGV4C,EA5XTjF,OAAOwG,eAAelH,EAAS,cAC7Be,OAAO,GAUT,IAAIa,GAAM,MACNC,EAAc,cACdC,EAAc,cACdC,EAAW,WACXC,EAAM,MACNC,EAAW,WACXC,EAAc,cACdC,EAAc,cACdC,EAAW,WACXC,EAAM,MACNC,EAAW,WA8WXG,EAAS,QAASA,GAAOK,EAAWE,EAAWE,GACjD9C,EAAgBD,KAAMsC,GAEtBtC,KAAKmD,GAAKnC,IACVhB,KAAKgE,UAAYrB,EAAYA,EAAUqB,UAAY,EAAI,EACvDhE,KAAKkE,UAAYrB,EAAYA,EAAUqB,UAAY,EAAI,EACvDlE,KAAK2C,UAAYA,EACjB3C,KAAK6C,UAAYA,EACjB7C,KAAKqF,cACLrF,KAAK+E,WAAa,KAClB/E,KAAK+C,QAAUA,EAEf8B,QAAQC,IAAI,aAAe9E,KAAKgE,UAAY,KAAOhE,KAAKkE,WAU1DrE,GAAQ0C,WAAaA","file":"gridjs.min.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.gridjs = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  // Relative targets\n  var ALL = 'ALL'; // All entities in grid\n  var PREV_IN_ROW = 'PREV_IN_ROW'; // Previous entity in row\n  var NEXT_IN_ROW = 'NEXT_IN_ROW'; // Next entity in row\n  var PREV_ROW = 'PREV_ROW'; // All entities in previous row\n  var ROW = 'ROW'; // All entities in row\n  var NEXT_ROW = 'NEXT_ROW'; // All entities in next row\n  var PREV_IN_COL = 'PREV_IN_COL'; // Previous entity in column\n  var NEXT_IN_COL = 'NEXT_IN_COL'; // Next entity in column\n  var PREV_COL = 'PREV_COL'; // All entities in previous column\n  var COL = 'COL'; // All entities in column\n  var NEXT_COL = 'NEXT_COL'; // All entities in next column\n\n  // After entity removed - actions\n  var DO_NOTHING = 'DO_NOTHING'; // Do nothing\n  var RENEW = 'RENEW'; // Replace with a new entity\n  var SHIFT_LEFT = 'SHIFT_LEFT'; // Shift the entities in the row left when one is deleted\n  var SHIFT_UP = 'SHIFT_UP'; // Shift the entities in the column up when one is deleted\n  var SHIFT_LEFT_ELSE_UP = 'SHIFT_LEFT_ELSE_UP'; // Shift the entities to the left if there are any, otherwise shift column up\n  var SHIFT_UP_ELSE_LEFT = 'SHIFT_UP_ELSE_LEFT'; // Shift the entities up if there are any, otherwise shift row left\n\n  // Default options for new grid.\n  // User may override any number of options in object passed as argument to the function.\n  var defaultOptions = {\n    userObjectChanged: null, // (newUserObject, oldUserObject, row, column, entityProperties, entityId)\n    entityAdded: null, // (row, column, entityProperties, entityId)\n    entityRemoved: null, // (row, column, entityProperties, entityId)\n    entityMessageReceived: null // (subject, message, userObject, entityProperties, entityId)\n  };\n\n  /**\n   * [getObjectValues description]\n   * @param  {[type]} obj [description]\n   * @return {[type]}     [description]\n   */\n  function getObjectValues(obj) {\n    return Object.keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n\n  /**\n   * Checks if value is classified as a Function object\n   * Thanks to A.Levy for this clone function (http://stackoverflow.com/a/728694)\n   * @param  {*}       value  The value to check\n   * @return {Boolean}        Returns true if value is a function, else false.\n   */\n  function isFunction(value) {\n    var getType = {};\n    return value && getType.toString.call(value) === '[object Function]';\n  }\n\n  /**\n   * Generate a uuid\n   * Thanks to broofa for this method of generating a uuid (ttp://stackoverflow.com/a/2117523)\n   * @return {string} uuid\n   */\n  function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Detect whether or not the target provided is a valid relative target identifier\n   * @param  {[type]}  target targetName\n   * @return {Boolean}\n   */\n  function isRelativeTarget(target) {\n    return [ALL, PREV_IN_ROW, NEXT_IN_ROW, PREV_ROW, ROW, NEXT_ROW, PREV_IN_COL, NEXT_IN_COL, PREV_COL, COL, NEXT_COL].includes(target);\n  }\n\n  /**\n   * [isAfterRemoveAction description]\n   * @param  {[type]}  action [description]\n   * @return {Boolean}        [description]\n   */\n  function isAfterRemoveAction(action) {\n    return [DO_NOTHING, RENEW, SHIFT_LEFT, SHIFT_UP, SHIFT_LEFT_ELSE_UP, SHIFT_UP_ELSE_LEFT].includes(action);\n  }\n\n  /**\n   * [isEntity description]\n   * @param  {[type]}  obj [description]\n   * @return {Boolean}     [description]\n   */\n  function isEntity(obj) {\n    return obj && obj instanceof Entity;\n  }\n\n  // When we remove an entity from the grid we will call a callback provided for the user's object.\n  // Based on the options passed in, we can modify the bahaviour.\n\n  /**\n   * Create a new grid\n   * @return {object}\n   */\n  function createGrid() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var entities = {};\n    var rows = [];\n    var columns = [];\n    var grid = {};\n\n    function addEntity(row, col) {\n      // Create a new entity and append to row and column.\n      var prevInRow = row.length > 0 ? row[row.length - 1] : null;\n      var prevInCol = col.length > 0 ? col[col.length - 1] : null;\n      var newEntity = new Entity(prevInRow, prevInCol, options);\n\n      if (prevInRow !== null) {\n        prevInRow.nextInRow = newEntity;\n      }\n\n      if (prevInCol !== null) {\n        prevInCol.netInCol = newEntity;\n      }\n\n      entities[newEntity.id] = newEntity;\n      row.push(newEntity);\n      col.push(newEntity);\n\n      return newEntity;\n    }\n\n    function getEntity(val, callback) {\n      // We need to resolve the value of source to an Entity\n      // Is this a string? It could be an id\n      if (isEntity(val)) {\n        callback(val);\n      } else if (typeof val === 'string' && Object.keys(entities).includes(val)) {\n        callback(entities[val]);\n      } else if (Array.isArray(val) && val.length === 2) {\n        getEntityByPosition(val[0], val[1], false, function (entity) {\n          return callback(entity);\n        });\n      } else {\n        callback(getEntityByUserObject(val));\n      }\n    }\n\n    function isEntityRelativeTarget(e1, e2, target) {\n      if (e1 !== e2) {\n        switch (target) {\n          case ALL:\n            return true;\n          case PREV_IN_ROW:\n            return e2 === e1.prevInRow;\n          case NEXT_IN_ROW:\n            return e2 === e1.prevInRow;\n          case PREV_ROW:\n            return e2.rowNumber === e1.rowNumber - 1;\n          case ROW:\n            return e2.rowNumber === e1.rowNumber;\n          case NEXT_ROW:\n            return e2.rowNumber === e1.rowNumber + 1;\n          case PREV_IN_COL:\n            return e2 === e1.prevInCol;\n          case NEXT_IN_COL:\n            return e2 === e1.nextInCol;\n          case NEXT_COL:\n            return e2.colNumber === e1.colNumber - 1;\n          case COL:\n            return e2.colNumber === e1.colNumber;\n          case PREV_COL:\n            return e2.colNumber === e1.colNumber + 1;\n        }\n      }\n\n      return false;\n    }\n\n    function getRelativeEntities(entity, target) {\n      return getObjectValues(entities).filter(function (val) {\n        return isEntityRelativeTarget(entity, val, target);\n      });\n    }\n\n    function getEntityByPosition(row, col, create, callback) {\n      var created = false;\n\n      // Do we have this many rows and columns?\n      // If not, and create flag is true, we will create them first\n      if (create) {\n        if (row === 1 && rows.length === 0 && col === 1 && columns.length === 0) {\n          // Special case - we need to create the first row and column\n          rows.push([]);\n          columns.push([]);\n          addEntity(rows[0], columns[0]);\n          created = true;\n        }\n\n        // Create new rows\n        for (var i = rows.length; i < row; i++) {\n          addRow();\n          created = true;\n        }\n\n        // Create new columns\n        for (var _i = columns.length; _i < col; _i++) {\n          addColumn();\n          created = true;\n        }\n      }\n\n      console.log('rowIdx = ' + (row - 1) + ', rows.length = ' + rows.length);\n      console.log('colIdx = ' + (col - 1) + ', rows[row - 1].length = ' + rows[row - 1].length);\n\n      if (rows.length >= row && rows[row - 1].length >= col) {\n        if (isFunction(callback)) {\n          callback(rows[row - 1][col - 1], created);\n        }\n      } else if (isFunction(callback)) {\n        callback(null, created);\n      }\n    }\n\n    function getEntityByUserObject(userObject) {\n      return getObjectValues(entities).find(function (entity) {\n        return entity.userObject === userObject;\n      }) || null;\n    }\n\n    function addRow() {\n      // Add an entity for each column\n      var row = [];\n      columns.forEach(function (col) {\n        return addEntity(row, col);\n      });\n      rows.push(row);\n    }\n\n    function addColumn() {\n      // Add an entity for each row\n      var col = [];\n      rows.forEach(function (row) {\n        return addEntity(row, col);\n      });\n      columns.push(col);\n    }\n\n    function setUserObject(entity, userObject) {\n      var oldUserObject = entity.userObject;\n      entity.userObject = userObject;\n\n      if (isFunction(options.userObjectChanged)) {\n        options.userObjectChanged(userObject, oldUserObject, entity.rowNumber, entity.colNumber, entity.properties, entity.id);\n      }\n    }\n\n    /**\n     * Publish a message out to other entities in the grid.\n     * @param  {string} source   The entity ID of the message source\n     * @param  {string} target   The relative target(s), or entity ID or target for message\n     * @param  {strinf} subject  The subject\n     * @param  {object} message  The message to send\n     * @return {undefined}\n     */\n    grid.publish = function (source, target, subject, message) {\n      // Source should be Entity, entityId, userObject or Array[row, column];\n      getEntity(source, function (sourceEntity) {\n        if (sourceEntity === null) {\n          throw new Error('Cannot publish message without a valid source');\n        }\n\n        getEntity(target, function (targetEntity) {\n          if (targetEntity !== null) {\n            if (isFunction(options.entityMessageReceived)) {\n              options.entityMessageReceived(subject, message, targetEntity.userObject, targetEntity.properties, targetEntity.id);\n            }\n          } else if (isRelativeTarget(target)) {\n            // Get entities, and for each call grid.publish\n            getRelativeEntities(source, target).forEach(function (entity) {\n              return grid.publish(source, entity, subject, message);\n            });\n          }\n        });\n      });\n    };\n\n    /**\n     * Find entities that when passed to interatee function, return true.\n     * @param  {function} iteratee Iteratee function (userObject, entityProps, entityId)\n     * @return {Entity[]}\n     */\n    grid.find = function (iteratee) {\n      if (isFunction(iteratee)) {\n        return getObjectValues(entities).filter(function (entity) {\n          return iteratee(entity.userObject, entity.properties, entity.id);\n        });\n      } else {\n        return [];\n      }\n    };\n\n    /**\n     * Get user object at grid position\n     * @param  {[type]} row    [description]\n     * @param  {[type]} column [description]\n     * @return {[type]}        [description]\n     */\n    grid.get = function (row, column, callback) {\n      if (isFunction(callback)) {\n        getEntityByPosition(row, column, false, function (entity) {\n          return callback(entity.userObject, entity.properties);\n        });\n      }\n    };\n\n    /**\n     * Set user object at grid position\n     * @param {[type]} row        [description]\n     * @param {[type]} column     [description]\n     * @param {[type]} userObject [description]\n     */\n    grid.set = function (row, column, userObject) {\n      console.log('setting entity');\n      console.log(row + ', ' + column);\n      getEntityByPosition(row, column, true, function (entity, created) {\n        if (userObject) {\n          setUserObject(entity, userObject);\n        }\n\n        if (created && isFunction(options.entityAdded)) {\n          options.entityAdded(entity.rowNumber, entity.colNumber, entity.properties, entity.id);\n        }\n      });\n    };\n\n    /**\n     * Move the user object from one entity on grid to another\n     * @param  {[type]} fromRow    [description]\n     * @param  {[type]} fromColumn [description]\n     * @param  {[type]} toRow      [description]\n     * @param  {[type]} toColumn   [description]\n     * @return {[type]}            [description]\n     */\n    grid.move = function (fromRow, fromColumn, toRow, toColumn) {\n      getEntityByPosition(fromRow, fromColumn, false, function (fromEntity) {\n        if (fromEntity === null) {\n          throw new Error('Source must exist within grid');\n        }\n\n        getEntityByPosition(toRow, toColumn, true, function (toEntity) {\n          var userObject = fromEntity.userObject;\n          setUserObject(fromEntity, null);\n          setUserObject(toEntity, userObject);\n        });\n      });\n    };\n\n    /**\n     * Get number of rows in grid\n     * @return {number} Number of rows\n     */\n    grid.getRowCount = function () {\n      return rows.length;\n    };\n\n    /**\n     * Get number of columns in grid\n     * @return {number} Number of columns\n     */\n    grid.getColumnCount = function () {\n      return columns.length;\n    };\n\n    return grid;\n  }\n\n  /**\n   * Entity class. Represents an item in the grid data store.\n   */\n\n  var Entity = function Entity(prevInRow, prevInCol, options) {\n    _classCallCheck(this, Entity);\n\n    this.id = uuid();\n    this.rowNumber = prevInRow ? prevInRow.rowNumber + 1 : 1;\n    this.colNumber = prevInCol ? prevInCol.colNumber + 1 : 1;\n    this.prevInRow = prevInRow;\n    this.prevInCol = prevInCol;\n    this.properties = {};\n    this.userObject = null;\n    this.options = options;\n\n    console.log('Entity at ' + this.rowNumber + ', ' + this.colNumber);\n  };\n\n  var DuplicateFirstEntityException = function DuplicateFirstEntityException() {\n    _classCallCheck(this, DuplicateFirstEntityException);\n\n    this.name = 'DuplicateFirstEntityException';\n    this.message = 'Cannot add multiple entities as first entity in grid';\n  };\n\n  exports.createGrid = createGrid;\n});"],"sourceRoot":"/source/"}